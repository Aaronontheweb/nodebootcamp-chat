#chatarea.row.display
    h3= title   
    .eight.columns(style="right:4.5%")
        ul#chat(data-bind="foreach: messages")
            li.message
                span(data-bind="text: author", style="font-weight:bold;width:200px;")
                &nbsp;
                span(data-bind="text: text")
                span(data-bind="text: timestamp", style="text-align:right;float:right;margin-right:10px;font-color:#E0E0E0;")

    .three.columns
        ul#users(data-bind="foreach: users")
            li
                span(data-bind="text: username", style="font-weight:bold;")
.row.display
    form#sendmessage(method='post', action='#', class='nice', data_bind="submit: addComment")
        .six.columns
            textarea(class='oversize expand input-text', rows='1', name='message[body]', id='message-body', required)
        .two.columns.pull-four
            input(type="button", value="Send", id='data-send', class='nice small radius blue button')

block append scripts
    script(src="/javascripts/dateformat.js")
    script(src="/socket.io/socket.io.js")
    script(type="text/javascript")
        function Message(data){
            this.author = ko.observable(data.author);
            this.timestamp = ko.observable(dateFormat(data.timestamp, "m/d/yyyy h:MM TT"));
            this.text = ko.observable(data.text);
        }

        function User(data){
            this.username = ko.observable(data.username);
        }

        function ChatViewModel() {
            //Data
            var self = this;
            
            self.users = ko.observableArray([]);
            self.messages = ko.observableArray([]);

            self.addMessage = function(data){
                self.messages.push(new Message(data));
            }

            self.addUser = function(data){
                self.users.push(new User(data));
            }

            self.removeUser = function(userid){
                delete users[userid];
            }

            self.loadUsers = function(users){
                $.each(users, function(key, value){
                    self.addUser(value);
                });
            }
        }

        var chatModel = new ChatViewModel();

        ko.applyBindings(chatModel);

        var socket = io.connect();

        socket.on('connect', function(){
        // call the server-side function 'adduser' and send one parameter (value of prompt)
            socket.emit('newuser', '#{session.userName}');
        });

        socket.on('loadusers', function(data){
            chatModel.loadUsers(data);
            console.log(data);
        });

        // listener, whenever the server emits 'updatechat', this updates the chat body
        socket.on('updatechat', function (data) {
            chatModel.addMessage(data);
            $('#chat').scrollTop(9000);
        });

        // listener, whenever the server emits 'updateusers', this updates the username list
        socket.on('adduser', function(data) {
            chatModel.addUser(data);
        });

        socket.on('removeuser', function(userid){
            chatModel.removeUser(userid);
        });

        // on load of page
        $(function(){
            // when the client clicks SEND
            $('#data-send').click( function() {
              var message = $('#message-body').val();
              $('#message-body').val('');
              // tell server to execute 'sendchat' and send along one parameter
              socket.emit('sendchat', message);
            });

            // when the client hits ENTER on their keyboard
            $('#message-body').keypress(function(e) {
              if(e.which == 13) {
                e.preventDefault();
                if($(this).val().length > 0){
                    $(this).blur();
                    $('#data-send').focus().click();
                    $(this).val(null);
                    $(this).focus();
                }
              }
            });
        });
